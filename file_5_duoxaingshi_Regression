import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn.linear_model as lm
import pickle
import sklearn.pipeline as pl
import sklearn.preprocessing as sp

#读取数据，输入集（二维），输出集（一维），训练模型，预测结果，画图
data = pd.read_excel('D:\worksp\model1.xlsx')

train_x = data['data1']
train_y = data['data2']
train_x = train_x.values.reshape(-1, 1)

plt.figure('Linear Regression', facecolor='lightgray')
plt.title('Linear Regression', fontsize=18)
plt.grid(linestyle=':')
plt.scatter(train_x, train_y, s=70, color='blue', label='Sample Points')

#多项式回归
model = pl.make_pipeline(sp.PolynomialFeatures(10), lm.LinearRegression())
model.fit(train_x, train_y)
predict_y = model.predict(train_x)

# model = lm.LinearRegression()
# model.fit(train_x, train_y)
# predict_y = model.predict(train_x)
#
#模型评估
import sklearn.metrics as sm
print(sm.mean_absolute_error(train_y, predict_y))
print(sm.mean_squared_error(train_y, predict_y))
print(sm.median_absolute_error(train_y, predict_y))
print(sm.r2_score(train_y, predict_y))
#绘制多项式函数图像，从最小到最大，拆300个点，预测300个函数值
train_x = np.linspace(train_x.min(), train_x.max(), 19)
train_y = model.predict(train_x.reshape(-1, 1))
plt.plot(train_x, predict_y, color='red', label='Regression Line')

plt.legend()
plt.show()

